// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS3PbNhD+K+i2R5pUnJ54U2NPRzNu6lHbU+oDTKwkZEiAAUC7Hg//ewcP8SFSkhU7",
	"Nvs4WSYeu/h29/uweIRMFqUUKIyG9BF0tsGCup+XSkllf5RKlqgMR/c5kwzt35VUBTWQAhfm/TlEYB5K",
	"9P/iGhXUERSoNV272WFQG8XFGuo6AoVfKq6QQfrJ79nOv2k2k7efMTN2r494v5Q5jvijkBpkc9NzilGD",
	"Z4YX2Dq2tR0BQ50pXhouxYhvEQha4OhAiargWnMpnGlusHA/flC4ghS+T1owk4Bkct2ssTuELalS9MH+",
	"X5XsNO93kHOujuHVMTuA7Nj5DVVrNMfDFuaNmd/Giub5rytIPx3GaBvcOtp1lbPjbnA24sJNbadxsZI+",
	"aYWhmTuSDy4sxEpRI9eKlhtUZF6ZjVQaIqhUDilsjCnTJFlzs6lu40wWCe8tGKQRXP2yIFwTKsj8ekGM",
	"JAUVdI2EZhlqbT9oVHc8Qx1DBDnPUGjsODQvabZBch7Pek7oNEnu7+9j6oZjqdZJWKuTq8WHy4+/XZ6d",
	"x7N4Y4rcxY4bi7xz54xcoSEFEi6+gwjuUPl8gFk8i9/Z2bJEQUsOKbyP3znLJTUbh3xCteZrUWyZIWRE",
	"/9AKTaWEJpTkXBsiV0TJHDXxa5HZY1OiKx8UZ09Ru3bBIIWf0cw7RqxxRQs0qLRLmb6tsIvd0pslHQ/J",
	"Siqw8YYUvlSoHmBbxtBab5PGqAqjQHajCTYwnskSTzdtV51k+MZO1qW08bXj57PZNn9RuADQssx55kBM",
	"Pmtfwe1+DSX1y0iFchyUuvdwdCTAdrT8Wnyb41prY6zQZ796UEN2YRdaX2UrWuXmJBQOcY2XtRHjlcC/",
	"SswMMoLbOXUEyQ7pP7EOuqtG8v66N/wyIf9aFRpC0XV+CiFwpLIX/OU4CcV/ijHkl26v18A8SNqTsl6T",
	"rT9vDngEpdQjMH9wFy0Ls8B7B/EAXj9l6YcsR6A2P0n28GIHaS4Kw6PY705u2EB1+vRbPzP2x0O+h9gm",
	"E+GmpJJHzmof6RwNDmPuv9uYay7W9gz2ILdUIyNSELNBsrggurJ+Ixvkw4VbHvLhoLgvLrZ1a4MX3Ami",
	"aq8kraZy9kxB/XGEvq1db5RNoP6OsFw/Bk1oFhfxPr47DX0vZt8I/f9arUVQViPR/MP1fcNoHqsov+70",
	"mPo+8+Vi+vLUfozXmxNMhM1D5z4xMt/t2vYRu8JC3nliD23VSskipOMg65ZutoWj7ddO5RS7Q+du7+y9",
	"dT72m6Rv0AsNm6BhUH/fYBMEKhjptJoOM0sJDsaA2JPy/2BfFXaerNQNu6mAz+7DwmiyBs074WVhTP72",
	"dfhvKod7uvtXSdx/YPe+r5PxqdGI78E3Kj/3dMH1OPxPcIcIzmPUEpyRz6a36QnyzvPRPkFeNoLcLnii",
	"Jnfedr5Gk3fsTfmO2H3FGgajHe2crg/h690dD7vqQtABfuKCvDz0vGnV8YgW9187T9fiHWvT0uKXe3bd",
	"yYoJCyhjO0y1/zo2Z+w5JEUZ69v5t/BT8045cWqijE1BVOv67wAAAP//gjHJkqsgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
