// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZTW/jNhP+K3zn7aEFFMmb7Uk3dxMUBrbbwG1P2xwYcWxzYZFakkrWCPTfC1K0JVmS",
	"LW3SVEFOsSRyvud5yMkjJDLNpEBhNMSPoJMNptT9nGvN1yJFYewT3W5/X0H8+RF+ULiCGP4fVTsjvy36",
	"hA9LucXa1iJ4hEzJDJXh6OQquUX71+wyhBi0UVysIYBvF2t54V9eC8PNbnEFRRGAwq85V8gg/lxuvg32",
	"m+XdF0wMFLdFANdKSWUFN9Ulkjl1K6lSaiAGLsz7SziI4MLgGhUUAaSoNV13GHdshZNZrW/bE4CPRNse",
	"hjpRPDNcig5FAQiaDrDArTqht5m8pgU6kRl26tZ5Kees+v3CwAvrsuQGVcq19n4Oq59qz4KhMHzFXWbG",
	"xbDoLI9O0a3YGKrWOCAAfl2X3/u0D/PYrl6IlezwMjtY7B65wdT9GBZAqMJAlaK7lguc9TTSwaR2Lymk",
	"BtncNBqKUYMXhqdYNVVVUufKnbPhWNDbHAHkGRtnWTsYXnpQ87Iutx0rK4P7OCVSGFp2TmkjLMRKUSPX",
	"imYbVGSem41U2opUW4hhY0wWR9Gam01+FyYyjXhjQyt28PG3BeGaUEHmNwtiJEmpoGskNElQa/tCo7rn",
	"CeoQAtjyBIXGmkHzjCYbJJfhrGGEjqPo4eEhpO5zKNU68nt19HHx4frTH9cXl+Es3Jh062qKG1vfzpwL",
	"8hENSZFw8T8I4B5V2e4wC2fhO7taZihoxiGG9+E7pzmjZuOKKaIHjHLPvu+aTis0uRKaULLl2hC5IpYB",
	"NCn3IrNuU1LBka1WalyTQwy/opnXlFjliqZoUGnXmE1dXooVWaolNQvJSiqw+YYYvuaodvt6iWtgWFWU",
	"UTkGnk070aSl3OLoeNUOfZ+k2MZztF5Hw/1qesn81pqqM2mry267nM323bM/Z2TZlicuhdEXXYJGpWYQ",
	"BjZOH8cY2Gor53+9FN2KFc23ZpRppywqjyYdynOB3zJMDDKC+zVFANER9A9sjfqujla4aXw+2QolvdXK",
	"ohJNLORZfLW/+yvEE+SpUnyRYjhJiK181CM4hTpwYNdbActucAz/Fl3pXzpZLxHz2plmUPtpsrfpPw96",
	"AJnUHaH+4M4ENtQCH4iHv2aIyyXL8pMFZNTmF8l2z+bI/krR4crSgzhlLUZsUkPxxPyfS3svwk4mw4e2",
	"ih45K8pMb9FgO+fle5tzzcXa+mAduaMaGZGCmA2SxRXRubUbWasertx2Xw8n0XZxte9dmzxvjodVe1yq",
	"UNUdU4eS/QgW/rmDXqw5pS1sAm15BgCbqTlkbHEV9kHhuKSUNPiySXlrnRlAlnck+S93BWsn+Vz/lfvG",
	"p7q88v3rqX5+fjhHDgfHJkIJ/m49MUY4vpb2sYPCVN6X7ODvjSslU1+lrWJcutVHk7mRCGQl1G4qTt8r",
	"LNOOGXE7T39u8BBXKhipXY9dGGzzu8j4IAwq6ZMXPy95slzXvu75+BwPQzrrz5PeiGlIF//1TQemyIdv",
	"YVTQd1sp3TpQ5skZWbl2PE2WcXhb+PMj4woTI9XupyoEFRYZ+WQkmh4dHo2i+uhweaDD2qhoGCPWRjTf",
	"w4hH+l5hRXb/16udrWpdzf1mjL+3+mpBnDgPLk+NPS0pnaHAEVPQTgo80vbqKbDnX67DyHBK89JeMmTs",
	"CJb6j0lzxp6CSJSxpp43A0aHwePz4RBlbApsWBT/BAAA//+qF/BFJCMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
