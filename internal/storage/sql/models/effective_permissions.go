// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EffectivePermission is an object representing the database table.
type EffectivePermission struct {
	SubjectID string `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	Target    string `boil:"target" json:"target" toml:"target" yaml:"target"`
	Scope     string `boil:"scope" json:"scope" toml:"scope" yaml:"scope"`
	FromRole  string `boil:"from_role" json:"from_role" toml:"from_role" yaml:"from_role"`

	R *effectivePermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L effectivePermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EffectivePermissionColumns = struct {
	SubjectID string
	Target    string
	Scope     string
	FromRole  string
}{
	SubjectID: "subject_id",
	Target:    "target",
	Scope:     "scope",
	FromRole:  "from_role",
}

var EffectivePermissionTableColumns = struct {
	SubjectID string
	Target    string
	Scope     string
	FromRole  string
}{
	SubjectID: "effective_permissions.subject_id",
	Target:    "effective_permissions.target",
	Scope:     "effective_permissions.scope",
	FromRole:  "effective_permissions.from_role",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var EffectivePermissionWhere = struct {
	SubjectID whereHelperstring
	Target    whereHelperstring
	Scope     whereHelperstring
	FromRole  whereHelperstring
}{
	SubjectID: whereHelperstring{field: "\"effective_permissions\".\"subject_id\""},
	Target:    whereHelperstring{field: "\"effective_permissions\".\"target\""},
	Scope:     whereHelperstring{field: "\"effective_permissions\".\"scope\""},
	FromRole:  whereHelperstring{field: "\"effective_permissions\".\"from_role\""},
}

// EffectivePermissionRels is where relationship names are stored.
var EffectivePermissionRels = struct {
	TargetPermission      string
	Subject               string
	ScopeTrackedDirectory string
	FromRoleRole          string
}{
	TargetPermission:      "TargetPermission",
	Subject:               "Subject",
	ScopeTrackedDirectory: "ScopeTrackedDirectory",
	FromRoleRole:          "FromRoleRole",
}

// effectivePermissionR is where relationships are stored.
type effectivePermissionR struct {
	TargetPermission      *Permission       `boil:"TargetPermission" json:"TargetPermission" toml:"TargetPermission" yaml:"TargetPermission"`
	Subject               *TrackedSubject   `boil:"Subject" json:"Subject" toml:"Subject" yaml:"Subject"`
	ScopeTrackedDirectory *TrackedDirectory `boil:"ScopeTrackedDirectory" json:"ScopeTrackedDirectory" toml:"ScopeTrackedDirectory" yaml:"ScopeTrackedDirectory"`
	FromRoleRole          *Role             `boil:"FromRoleRole" json:"FromRoleRole" toml:"FromRoleRole" yaml:"FromRoleRole"`
}

// NewStruct creates a new relationship struct
func (*effectivePermissionR) NewStruct() *effectivePermissionR {
	return &effectivePermissionR{}
}

func (r *effectivePermissionR) GetTargetPermission() *Permission {
	if r == nil {
		return nil
	}
	return r.TargetPermission
}

func (r *effectivePermissionR) GetSubject() *TrackedSubject {
	if r == nil {
		return nil
	}
	return r.Subject
}

func (r *effectivePermissionR) GetScopeTrackedDirectory() *TrackedDirectory {
	if r == nil {
		return nil
	}
	return r.ScopeTrackedDirectory
}

func (r *effectivePermissionR) GetFromRoleRole() *Role {
	if r == nil {
		return nil
	}
	return r.FromRoleRole
}

// effectivePermissionL is where Load methods for each relationship are stored.
type effectivePermissionL struct{}

var (
	effectivePermissionAllColumns            = []string{"subject_id", "target", "scope", "from_role"}
	effectivePermissionColumnsWithoutDefault = []string{"subject_id", "target", "scope", "from_role"}
	effectivePermissionColumnsWithDefault    = []string{}
	effectivePermissionPrimaryKeyColumns     = []string{"subject_id", "target", "scope"}
	effectivePermissionGeneratedColumns      = []string{}
)

type (
	// EffectivePermissionSlice is an alias for a slice of pointers to EffectivePermission.
	// This should almost always be used instead of []EffectivePermission.
	EffectivePermissionSlice []*EffectivePermission
	// EffectivePermissionHook is the signature for custom EffectivePermission hook methods
	EffectivePermissionHook func(context.Context, boil.ContextExecutor, *EffectivePermission) error

	effectivePermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	effectivePermissionType                 = reflect.TypeOf(&EffectivePermission{})
	effectivePermissionMapping              = queries.MakeStructMapping(effectivePermissionType)
	effectivePermissionPrimaryKeyMapping, _ = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, effectivePermissionPrimaryKeyColumns)
	effectivePermissionInsertCacheMut       sync.RWMutex
	effectivePermissionInsertCache          = make(map[string]insertCache)
	effectivePermissionUpdateCacheMut       sync.RWMutex
	effectivePermissionUpdateCache          = make(map[string]updateCache)
	effectivePermissionUpsertCacheMut       sync.RWMutex
	effectivePermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var effectivePermissionAfterSelectHooks []EffectivePermissionHook

var effectivePermissionBeforeInsertHooks []EffectivePermissionHook
var effectivePermissionAfterInsertHooks []EffectivePermissionHook

var effectivePermissionBeforeUpdateHooks []EffectivePermissionHook
var effectivePermissionAfterUpdateHooks []EffectivePermissionHook

var effectivePermissionBeforeDeleteHooks []EffectivePermissionHook
var effectivePermissionAfterDeleteHooks []EffectivePermissionHook

var effectivePermissionBeforeUpsertHooks []EffectivePermissionHook
var effectivePermissionAfterUpsertHooks []EffectivePermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EffectivePermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EffectivePermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EffectivePermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EffectivePermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EffectivePermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EffectivePermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EffectivePermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EffectivePermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EffectivePermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range effectivePermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEffectivePermissionHook registers your hook function for all future operations.
func AddEffectivePermissionHook(hookPoint boil.HookPoint, effectivePermissionHook EffectivePermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		effectivePermissionAfterSelectHooks = append(effectivePermissionAfterSelectHooks, effectivePermissionHook)
	case boil.BeforeInsertHook:
		effectivePermissionBeforeInsertHooks = append(effectivePermissionBeforeInsertHooks, effectivePermissionHook)
	case boil.AfterInsertHook:
		effectivePermissionAfterInsertHooks = append(effectivePermissionAfterInsertHooks, effectivePermissionHook)
	case boil.BeforeUpdateHook:
		effectivePermissionBeforeUpdateHooks = append(effectivePermissionBeforeUpdateHooks, effectivePermissionHook)
	case boil.AfterUpdateHook:
		effectivePermissionAfterUpdateHooks = append(effectivePermissionAfterUpdateHooks, effectivePermissionHook)
	case boil.BeforeDeleteHook:
		effectivePermissionBeforeDeleteHooks = append(effectivePermissionBeforeDeleteHooks, effectivePermissionHook)
	case boil.AfterDeleteHook:
		effectivePermissionAfterDeleteHooks = append(effectivePermissionAfterDeleteHooks, effectivePermissionHook)
	case boil.BeforeUpsertHook:
		effectivePermissionBeforeUpsertHooks = append(effectivePermissionBeforeUpsertHooks, effectivePermissionHook)
	case boil.AfterUpsertHook:
		effectivePermissionAfterUpsertHooks = append(effectivePermissionAfterUpsertHooks, effectivePermissionHook)
	}
}

// One returns a single effectivePermission record from the query.
func (q effectivePermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EffectivePermission, error) {
	o := &EffectivePermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for effective_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EffectivePermission records from the query.
func (q effectivePermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (EffectivePermissionSlice, error) {
	var o []*EffectivePermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EffectivePermission slice")
	}

	if len(effectivePermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EffectivePermission records in the query.
func (q effectivePermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count effective_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q effectivePermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if effective_permissions exists")
	}

	return count > 0, nil
}

// TargetPermission pointed to by the foreign key.
func (o *EffectivePermission) TargetPermission(mods ...qm.QueryMod) permissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"target\" = ?", o.Target),
	}

	queryMods = append(queryMods, mods...)

	return Permissions(queryMods...)
}

// Subject pointed to by the foreign key.
func (o *EffectivePermission) Subject(mods ...qm.QueryMod) trackedSubjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"subject_id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	return TrackedSubjects(queryMods...)
}

// ScopeTrackedDirectory pointed to by the foreign key.
func (o *EffectivePermission) ScopeTrackedDirectory(mods ...qm.QueryMod) trackedDirectoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Scope),
	}

	queryMods = append(queryMods, mods...)

	return TrackedDirectories(queryMods...)
}

// FromRoleRole pointed to by the foreign key.
func (o *EffectivePermission) FromRoleRole(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromRole),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// LoadTargetPermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (effectivePermissionL) LoadTargetPermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEffectivePermission interface{}, mods queries.Applicator) error {
	var slice []*EffectivePermission
	var object *EffectivePermission

	if singular {
		var ok bool
		object, ok = maybeEffectivePermission.(*EffectivePermission)
		if !ok {
			object = new(EffectivePermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEffectivePermission))
			}
		}
	} else {
		s, ok := maybeEffectivePermission.(*[]*EffectivePermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEffectivePermission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &effectivePermissionR{}
		}
		args = append(args, object.Target)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &effectivePermissionR{}
			}

			for _, a := range args {
				if a == obj.Target {
					continue Outer
				}
			}

			args = append(args, obj.Target)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`permissions`),
		qm.WhereIn(`permissions.target in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Permission")
	}

	var resultSlice []*Permission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissions")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetPermission = foreign
		if foreign.R == nil {
			foreign.R = &permissionR{}
		}
		foreign.R.TargetEffectivePermissions = append(foreign.R.TargetEffectivePermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Target == foreign.Target {
				local.R.TargetPermission = foreign
				if foreign.R == nil {
					foreign.R = &permissionR{}
				}
				foreign.R.TargetEffectivePermissions = append(foreign.R.TargetEffectivePermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (effectivePermissionL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEffectivePermission interface{}, mods queries.Applicator) error {
	var slice []*EffectivePermission
	var object *EffectivePermission

	if singular {
		var ok bool
		object, ok = maybeEffectivePermission.(*EffectivePermission)
		if !ok {
			object = new(EffectivePermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEffectivePermission))
			}
		}
	} else {
		s, ok := maybeEffectivePermission.(*[]*EffectivePermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEffectivePermission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &effectivePermissionR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &effectivePermissionR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tracked_subjects`),
		qm.WhereIn(`tracked_subjects.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackedSubject")
	}

	var resultSlice []*TrackedSubject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackedSubject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracked_subjects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracked_subjects")
	}

	if len(trackedSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &trackedSubjectR{}
		}
		foreign.R.SubjectEffectivePermissions = append(foreign.R.SubjectEffectivePermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.SubjectID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &trackedSubjectR{}
				}
				foreign.R.SubjectEffectivePermissions = append(foreign.R.SubjectEffectivePermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadScopeTrackedDirectory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (effectivePermissionL) LoadScopeTrackedDirectory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEffectivePermission interface{}, mods queries.Applicator) error {
	var slice []*EffectivePermission
	var object *EffectivePermission

	if singular {
		var ok bool
		object, ok = maybeEffectivePermission.(*EffectivePermission)
		if !ok {
			object = new(EffectivePermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEffectivePermission))
			}
		}
	} else {
		s, ok := maybeEffectivePermission.(*[]*EffectivePermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEffectivePermission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &effectivePermissionR{}
		}
		args = append(args, object.Scope)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &effectivePermissionR{}
			}

			for _, a := range args {
				if a == obj.Scope {
					continue Outer
				}
			}

			args = append(args, obj.Scope)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tracked_directories`),
		qm.WhereIn(`tracked_directories.id in ?`, args...),
		qmhelper.WhereIsNull(`tracked_directories.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackedDirectory")
	}

	var resultSlice []*TrackedDirectory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackedDirectory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracked_directories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracked_directories")
	}

	if len(trackedDirectoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ScopeTrackedDirectory = foreign
		if foreign.R == nil {
			foreign.R = &trackedDirectoryR{}
		}
		foreign.R.ScopeEffectivePermissions = append(foreign.R.ScopeEffectivePermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Scope == foreign.ID {
				local.R.ScopeTrackedDirectory = foreign
				if foreign.R == nil {
					foreign.R = &trackedDirectoryR{}
				}
				foreign.R.ScopeEffectivePermissions = append(foreign.R.ScopeEffectivePermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadFromRoleRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (effectivePermissionL) LoadFromRoleRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEffectivePermission interface{}, mods queries.Applicator) error {
	var slice []*EffectivePermission
	var object *EffectivePermission

	if singular {
		var ok bool
		object, ok = maybeEffectivePermission.(*EffectivePermission)
		if !ok {
			object = new(EffectivePermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEffectivePermission))
			}
		}
	} else {
		s, ok := maybeEffectivePermission.(*[]*EffectivePermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEffectivePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEffectivePermission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &effectivePermissionR{}
		}
		args = append(args, object.FromRole)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &effectivePermissionR{}
			}

			for _, a := range args {
				if a == obj.FromRole {
					continue Outer
				}
			}

			args = append(args, obj.FromRole)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromRoleRole = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.FromRoleEffectivePermissions = append(foreign.R.FromRoleEffectivePermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromRole == foreign.ID {
				local.R.FromRoleRole = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.FromRoleEffectivePermissions = append(foreign.R.FromRoleEffectivePermissions, local)
				break
			}
		}
	}

	return nil
}

// SetTargetPermission of the effectivePermission to the related item.
// Sets o.R.TargetPermission to related.
// Adds o to related.R.TargetEffectivePermissions.
func (o *EffectivePermission) SetTargetPermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Permission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"effective_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target"}),
		strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.Target, o.SubjectID, o.Target, o.Scope}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Target = related.Target
	if o.R == nil {
		o.R = &effectivePermissionR{
			TargetPermission: related,
		}
	} else {
		o.R.TargetPermission = related
	}

	if related.R == nil {
		related.R = &permissionR{
			TargetEffectivePermissions: EffectivePermissionSlice{o},
		}
	} else {
		related.R.TargetEffectivePermissions = append(related.R.TargetEffectivePermissions, o)
	}

	return nil
}

// SetSubject of the effectivePermission to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.SubjectEffectivePermissions.
func (o *EffectivePermission) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrackedSubject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"effective_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.SubjectID, o.SubjectID, o.Target, o.Scope}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.SubjectID
	if o.R == nil {
		o.R = &effectivePermissionR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &trackedSubjectR{
			SubjectEffectivePermissions: EffectivePermissionSlice{o},
		}
	} else {
		related.R.SubjectEffectivePermissions = append(related.R.SubjectEffectivePermissions, o)
	}

	return nil
}

// SetScopeTrackedDirectory of the effectivePermission to the related item.
// Sets o.R.ScopeTrackedDirectory to related.
// Adds o to related.R.ScopeEffectivePermissions.
func (o *EffectivePermission) SetScopeTrackedDirectory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrackedDirectory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"effective_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"scope"}),
		strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SubjectID, o.Target, o.Scope}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Scope = related.ID
	if o.R == nil {
		o.R = &effectivePermissionR{
			ScopeTrackedDirectory: related,
		}
	} else {
		o.R.ScopeTrackedDirectory = related
	}

	if related.R == nil {
		related.R = &trackedDirectoryR{
			ScopeEffectivePermissions: EffectivePermissionSlice{o},
		}
	} else {
		related.R.ScopeEffectivePermissions = append(related.R.ScopeEffectivePermissions, o)
	}

	return nil
}

// SetFromRoleRole of the effectivePermission to the related item.
// Sets o.R.FromRoleRole to related.
// Adds o to related.R.FromRoleEffectivePermissions.
func (o *EffectivePermission) SetFromRoleRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"effective_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_role"}),
		strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SubjectID, o.Target, o.Scope}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromRole = related.ID
	if o.R == nil {
		o.R = &effectivePermissionR{
			FromRoleRole: related,
		}
	} else {
		o.R.FromRoleRole = related
	}

	if related.R == nil {
		related.R = &roleR{
			FromRoleEffectivePermissions: EffectivePermissionSlice{o},
		}
	} else {
		related.R.FromRoleEffectivePermissions = append(related.R.FromRoleEffectivePermissions, o)
	}

	return nil
}

// EffectivePermissions retrieves all the records using an executor.
func EffectivePermissions(mods ...qm.QueryMod) effectivePermissionQuery {
	mods = append(mods, qm.From("\"effective_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"effective_permissions\".*"})
	}

	return effectivePermissionQuery{q}
}

// FindEffectivePermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEffectivePermission(ctx context.Context, exec boil.ContextExecutor, subjectID string, target string, scope string, selectCols ...string) (*EffectivePermission, error) {
	effectivePermissionObj := &EffectivePermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"effective_permissions\" where \"subject_id\"=$1 AND \"target\"=$2 AND \"scope\"=$3", sel,
	)

	q := queries.Raw(query, subjectID, target, scope)

	err := q.Bind(ctx, exec, effectivePermissionObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from effective_permissions")
	}

	if err = effectivePermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return effectivePermissionObj, err
	}

	return effectivePermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EffectivePermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no effective_permissions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(effectivePermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	effectivePermissionInsertCacheMut.RLock()
	cache, cached := effectivePermissionInsertCache[key]
	effectivePermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			effectivePermissionAllColumns,
			effectivePermissionColumnsWithDefault,
			effectivePermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"effective_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"effective_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into effective_permissions")
	}

	if !cached {
		effectivePermissionInsertCacheMut.Lock()
		effectivePermissionInsertCache[key] = cache
		effectivePermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EffectivePermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EffectivePermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	effectivePermissionUpdateCacheMut.RLock()
	cache, cached := effectivePermissionUpdateCache[key]
	effectivePermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			effectivePermissionAllColumns,
			effectivePermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update effective_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"effective_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, effectivePermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, append(wl, effectivePermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update effective_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for effective_permissions")
	}

	if !cached {
		effectivePermissionUpdateCacheMut.Lock()
		effectivePermissionUpdateCache[key] = cache
		effectivePermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q effectivePermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for effective_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for effective_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EffectivePermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), effectivePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"effective_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, effectivePermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in effectivePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all effectivePermission")
	}
	return rowsAff, nil
}

// Delete deletes a single EffectivePermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EffectivePermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EffectivePermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), effectivePermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"effective_permissions\" WHERE \"subject_id\"=$1 AND \"target\"=$2 AND \"scope\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from effective_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for effective_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q effectivePermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no effectivePermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from effective_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for effective_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EffectivePermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(effectivePermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), effectivePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"effective_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, effectivePermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from effectivePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for effective_permissions")
	}

	if len(effectivePermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EffectivePermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEffectivePermission(ctx, exec, o.SubjectID, o.Target, o.Scope)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EffectivePermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EffectivePermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), effectivePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"effective_permissions\".* FROM \"effective_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, effectivePermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EffectivePermissionSlice")
	}

	*o = slice

	return nil
}

// EffectivePermissionExists checks if the EffectivePermission row exists.
func EffectivePermissionExists(ctx context.Context, exec boil.ContextExecutor, subjectID string, target string, scope string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"effective_permissions\" where \"subject_id\"=$1 AND \"target\"=$2 AND \"scope\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, subjectID, target, scope)
	}
	row := exec.QueryRowContext(ctx, sql, subjectID, target, scope)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if effective_permissions exists")
	}

	return exists, nil
}

// Exists checks if the EffectivePermission row exists.
func (o *EffectivePermission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EffectivePermissionExists(ctx, exec, o.SubjectID, o.Target, o.Scope)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EffectivePermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no effective_permissions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(effectivePermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	effectivePermissionUpsertCacheMut.RLock()
	cache, cached := effectivePermissionUpsertCache[key]
	effectivePermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			effectivePermissionAllColumns,
			effectivePermissionColumnsWithDefault,
			effectivePermissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			effectivePermissionAllColumns,
			effectivePermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert effective_permissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(effectivePermissionPrimaryKeyColumns))
			copy(conflict, effectivePermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"effective_permissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(effectivePermissionType, effectivePermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert effective_permissions")
	}

	if !cached {
		effectivePermissionUpsertCacheMut.Lock()
		effectivePermissionUpsertCache[key] = cache
		effectivePermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
