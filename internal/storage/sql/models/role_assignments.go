// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoleAssignment is an object representing the database table.
type RoleAssignment struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleID    string    `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	SubjectID string    `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	Scope     string    `boil:"scope" json:"scope" toml:"scope" yaml:"scope"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *roleAssignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleAssignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleAssignmentColumns = struct {
	ID        string
	RoleID    string
	SubjectID string
	Scope     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	RoleID:    "role_id",
	SubjectID: "subject_id",
	Scope:     "scope",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var RoleAssignmentTableColumns = struct {
	ID        string
	RoleID    string
	SubjectID string
	Scope     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "role_assignments.id",
	RoleID:    "role_assignments.role_id",
	SubjectID: "role_assignments.subject_id",
	Scope:     "role_assignments.scope",
	CreatedAt: "role_assignments.created_at",
	UpdatedAt: "role_assignments.updated_at",
}

// Generated where

var RoleAssignmentWhere = struct {
	ID        whereHelperstring
	RoleID    whereHelperstring
	SubjectID whereHelperstring
	Scope     whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"role_assignments\".\"id\""},
	RoleID:    whereHelperstring{field: "\"role_assignments\".\"role_id\""},
	SubjectID: whereHelperstring{field: "\"role_assignments\".\"subject_id\""},
	Scope:     whereHelperstring{field: "\"role_assignments\".\"scope\""},
	CreatedAt: whereHelpertime_Time{field: "\"role_assignments\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"role_assignments\".\"updated_at\""},
}

// RoleAssignmentRels is where relationship names are stored.
var RoleAssignmentRels = struct {
	Subject               string
	ScopeTrackedDirectory string
	Role                  string
}{
	Subject:               "Subject",
	ScopeTrackedDirectory: "ScopeTrackedDirectory",
	Role:                  "Role",
}

// roleAssignmentR is where relationships are stored.
type roleAssignmentR struct {
	Subject               *TrackedSubject   `boil:"Subject" json:"Subject" toml:"Subject" yaml:"Subject"`
	ScopeTrackedDirectory *TrackedDirectory `boil:"ScopeTrackedDirectory" json:"ScopeTrackedDirectory" toml:"ScopeTrackedDirectory" yaml:"ScopeTrackedDirectory"`
	Role                  *Role             `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
}

// NewStruct creates a new relationship struct
func (*roleAssignmentR) NewStruct() *roleAssignmentR {
	return &roleAssignmentR{}
}

func (r *roleAssignmentR) GetSubject() *TrackedSubject {
	if r == nil {
		return nil
	}
	return r.Subject
}

func (r *roleAssignmentR) GetScopeTrackedDirectory() *TrackedDirectory {
	if r == nil {
		return nil
	}
	return r.ScopeTrackedDirectory
}

func (r *roleAssignmentR) GetRole() *Role {
	if r == nil {
		return nil
	}
	return r.Role
}

// roleAssignmentL is where Load methods for each relationship are stored.
type roleAssignmentL struct{}

var (
	roleAssignmentAllColumns            = []string{"id", "role_id", "subject_id", "scope", "created_at", "updated_at"}
	roleAssignmentColumnsWithoutDefault = []string{"role_id", "subject_id", "scope"}
	roleAssignmentColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	roleAssignmentPrimaryKeyColumns     = []string{"id"}
	roleAssignmentGeneratedColumns      = []string{}
)

type (
	// RoleAssignmentSlice is an alias for a slice of pointers to RoleAssignment.
	// This should almost always be used instead of []RoleAssignment.
	RoleAssignmentSlice []*RoleAssignment
	// RoleAssignmentHook is the signature for custom RoleAssignment hook methods
	RoleAssignmentHook func(context.Context, boil.ContextExecutor, *RoleAssignment) error

	roleAssignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleAssignmentType                 = reflect.TypeOf(&RoleAssignment{})
	roleAssignmentMapping              = queries.MakeStructMapping(roleAssignmentType)
	roleAssignmentPrimaryKeyMapping, _ = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, roleAssignmentPrimaryKeyColumns)
	roleAssignmentInsertCacheMut       sync.RWMutex
	roleAssignmentInsertCache          = make(map[string]insertCache)
	roleAssignmentUpdateCacheMut       sync.RWMutex
	roleAssignmentUpdateCache          = make(map[string]updateCache)
	roleAssignmentUpsertCacheMut       sync.RWMutex
	roleAssignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleAssignmentAfterSelectHooks []RoleAssignmentHook

var roleAssignmentBeforeInsertHooks []RoleAssignmentHook
var roleAssignmentAfterInsertHooks []RoleAssignmentHook

var roleAssignmentBeforeUpdateHooks []RoleAssignmentHook
var roleAssignmentAfterUpdateHooks []RoleAssignmentHook

var roleAssignmentBeforeDeleteHooks []RoleAssignmentHook
var roleAssignmentAfterDeleteHooks []RoleAssignmentHook

var roleAssignmentBeforeUpsertHooks []RoleAssignmentHook
var roleAssignmentAfterUpsertHooks []RoleAssignmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleAssignment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleAssignment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleAssignment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleAssignment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleAssignment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleAssignment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleAssignment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleAssignment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleAssignment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAssignmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleAssignmentHook registers your hook function for all future operations.
func AddRoleAssignmentHook(hookPoint boil.HookPoint, roleAssignmentHook RoleAssignmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roleAssignmentAfterSelectHooks = append(roleAssignmentAfterSelectHooks, roleAssignmentHook)
	case boil.BeforeInsertHook:
		roleAssignmentBeforeInsertHooks = append(roleAssignmentBeforeInsertHooks, roleAssignmentHook)
	case boil.AfterInsertHook:
		roleAssignmentAfterInsertHooks = append(roleAssignmentAfterInsertHooks, roleAssignmentHook)
	case boil.BeforeUpdateHook:
		roleAssignmentBeforeUpdateHooks = append(roleAssignmentBeforeUpdateHooks, roleAssignmentHook)
	case boil.AfterUpdateHook:
		roleAssignmentAfterUpdateHooks = append(roleAssignmentAfterUpdateHooks, roleAssignmentHook)
	case boil.BeforeDeleteHook:
		roleAssignmentBeforeDeleteHooks = append(roleAssignmentBeforeDeleteHooks, roleAssignmentHook)
	case boil.AfterDeleteHook:
		roleAssignmentAfterDeleteHooks = append(roleAssignmentAfterDeleteHooks, roleAssignmentHook)
	case boil.BeforeUpsertHook:
		roleAssignmentBeforeUpsertHooks = append(roleAssignmentBeforeUpsertHooks, roleAssignmentHook)
	case boil.AfterUpsertHook:
		roleAssignmentAfterUpsertHooks = append(roleAssignmentAfterUpsertHooks, roleAssignmentHook)
	}
}

// One returns a single roleAssignment record from the query.
func (q roleAssignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleAssignment, error) {
	o := &RoleAssignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_assignments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleAssignment records from the query.
func (q roleAssignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleAssignmentSlice, error) {
	var o []*RoleAssignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleAssignment slice")
	}

	if len(roleAssignmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleAssignment records in the query.
func (q roleAssignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_assignments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleAssignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_assignments exists")
	}

	return count > 0, nil
}

// Subject pointed to by the foreign key.
func (o *RoleAssignment) Subject(mods ...qm.QueryMod) trackedSubjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"subject_id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	return TrackedSubjects(queryMods...)
}

// ScopeTrackedDirectory pointed to by the foreign key.
func (o *RoleAssignment) ScopeTrackedDirectory(mods ...qm.QueryMod) trackedDirectoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Scope),
	}

	queryMods = append(queryMods, mods...)

	return TrackedDirectories(queryMods...)
}

// Role pointed to by the foreign key.
func (o *RoleAssignment) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleAssignmentL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleAssignment interface{}, mods queries.Applicator) error {
	var slice []*RoleAssignment
	var object *RoleAssignment

	if singular {
		var ok bool
		object, ok = maybeRoleAssignment.(*RoleAssignment)
		if !ok {
			object = new(RoleAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleAssignment))
			}
		}
	} else {
		s, ok := maybeRoleAssignment.(*[]*RoleAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleAssignmentR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleAssignmentR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tracked_subjects`),
		qm.WhereIn(`tracked_subjects.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackedSubject")
	}

	var resultSlice []*TrackedSubject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackedSubject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracked_subjects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracked_subjects")
	}

	if len(trackedSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &trackedSubjectR{}
		}
		foreign.R.SubjectRoleAssignments = append(foreign.R.SubjectRoleAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.SubjectID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &trackedSubjectR{}
				}
				foreign.R.SubjectRoleAssignments = append(foreign.R.SubjectRoleAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadScopeTrackedDirectory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleAssignmentL) LoadScopeTrackedDirectory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleAssignment interface{}, mods queries.Applicator) error {
	var slice []*RoleAssignment
	var object *RoleAssignment

	if singular {
		var ok bool
		object, ok = maybeRoleAssignment.(*RoleAssignment)
		if !ok {
			object = new(RoleAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleAssignment))
			}
		}
	} else {
		s, ok := maybeRoleAssignment.(*[]*RoleAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleAssignmentR{}
		}
		args = append(args, object.Scope)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleAssignmentR{}
			}

			for _, a := range args {
				if a == obj.Scope {
					continue Outer
				}
			}

			args = append(args, obj.Scope)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tracked_directories`),
		qm.WhereIn(`tracked_directories.id in ?`, args...),
		qmhelper.WhereIsNull(`tracked_directories.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackedDirectory")
	}

	var resultSlice []*TrackedDirectory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackedDirectory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracked_directories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracked_directories")
	}

	if len(trackedDirectoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ScopeTrackedDirectory = foreign
		if foreign.R == nil {
			foreign.R = &trackedDirectoryR{}
		}
		foreign.R.ScopeRoleAssignments = append(foreign.R.ScopeRoleAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Scope == foreign.ID {
				local.R.ScopeTrackedDirectory = foreign
				if foreign.R == nil {
					foreign.R = &trackedDirectoryR{}
				}
				foreign.R.ScopeRoleAssignments = append(foreign.R.ScopeRoleAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleAssignmentL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleAssignment interface{}, mods queries.Applicator) error {
	var slice []*RoleAssignment
	var object *RoleAssignment

	if singular {
		var ok bool
		object, ok = maybeRoleAssignment.(*RoleAssignment)
		if !ok {
			object = new(RoleAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleAssignment))
			}
		}
	} else {
		s, ok := maybeRoleAssignment.(*[]*RoleAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleAssignmentR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleAssignmentR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleAssignments = append(foreign.R.RoleAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleAssignments = append(foreign.R.RoleAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetSubject of the roleAssignment to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.SubjectRoleAssignments.
func (o *RoleAssignment) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrackedSubject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.SubjectID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.SubjectID
	if o.R == nil {
		o.R = &roleAssignmentR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &trackedSubjectR{
			SubjectRoleAssignments: RoleAssignmentSlice{o},
		}
	} else {
		related.R.SubjectRoleAssignments = append(related.R.SubjectRoleAssignments, o)
	}

	return nil
}

// SetScopeTrackedDirectory of the roleAssignment to the related item.
// Sets o.R.ScopeTrackedDirectory to related.
// Adds o to related.R.ScopeRoleAssignments.
func (o *RoleAssignment) SetScopeTrackedDirectory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrackedDirectory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"scope"}),
		strmangle.WhereClause("\"", "\"", 2, roleAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Scope = related.ID
	if o.R == nil {
		o.R = &roleAssignmentR{
			ScopeTrackedDirectory: related,
		}
	} else {
		o.R.ScopeTrackedDirectory = related
	}

	if related.R == nil {
		related.R = &trackedDirectoryR{
			ScopeRoleAssignments: RoleAssignmentSlice{o},
		}
	} else {
		related.R.ScopeRoleAssignments = append(related.R.ScopeRoleAssignments, o)
	}

	return nil
}

// SetRole of the roleAssignment to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleAssignments.
func (o *RoleAssignment) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleAssignmentR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleAssignments: RoleAssignmentSlice{o},
		}
	} else {
		related.R.RoleAssignments = append(related.R.RoleAssignments, o)
	}

	return nil
}

// RoleAssignments retrieves all the records using an executor.
func RoleAssignments(mods ...qm.QueryMod) roleAssignmentQuery {
	mods = append(mods, qm.From("\"role_assignments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"role_assignments\".*"})
	}

	return roleAssignmentQuery{q}
}

// FindRoleAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleAssignment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RoleAssignment, error) {
	roleAssignmentObj := &RoleAssignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_assignments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleAssignmentObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from role_assignments")
	}

	if err = roleAssignmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roleAssignmentObj, err
	}

	return roleAssignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleAssignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_assignments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleAssignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleAssignmentInsertCacheMut.RLock()
	cache, cached := roleAssignmentInsertCache[key]
	roleAssignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleAssignmentAllColumns,
			roleAssignmentColumnsWithDefault,
			roleAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_assignments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_assignments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_assignments")
	}

	if !cached {
		roleAssignmentInsertCacheMut.Lock()
		roleAssignmentInsertCache[key] = cache
		roleAssignmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleAssignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleAssignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleAssignmentUpdateCacheMut.RLock()
	cache, cached := roleAssignmentUpdateCache[key]
	roleAssignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleAssignmentAllColumns,
			roleAssignmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_assignments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_assignments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleAssignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, append(wl, roleAssignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_assignments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_assignments")
	}

	if !cached {
		roleAssignmentUpdateCacheMut.Lock()
		roleAssignmentUpdateCache[key] = cache
		roleAssignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleAssignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_assignments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleAssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleAssignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleAssignment")
	}
	return rowsAff, nil
}

// Delete deletes a single RoleAssignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleAssignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleAssignment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleAssignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"role_assignments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_assignments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleAssignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleAssignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_assignments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleAssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleAssignmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleAssignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_assignments")
	}

	if len(roleAssignmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleAssignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleAssignment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleAssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleAssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_assignments\".* FROM \"role_assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleAssignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleAssignmentSlice")
	}

	*o = slice

	return nil
}

// RoleAssignmentExists checks if the RoleAssignment row exists.
func RoleAssignmentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_assignments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_assignments exists")
	}

	return exists, nil
}

// Exists checks if the RoleAssignment row exists.
func (o *RoleAssignment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoleAssignmentExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleAssignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_assignments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleAssignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleAssignmentUpsertCacheMut.RLock()
	cache, cached := roleAssignmentUpsertCache[key]
	roleAssignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleAssignmentAllColumns,
			roleAssignmentColumnsWithDefault,
			roleAssignmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleAssignmentAllColumns,
			roleAssignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_assignments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleAssignmentPrimaryKeyColumns))
			copy(conflict, roleAssignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"role_assignments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleAssignmentType, roleAssignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_assignments")
	}

	if !cached {
		roleAssignmentUpsertCacheMut.Lock()
		roleAssignmentUpsertCache[key] = cache
		roleAssignmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
