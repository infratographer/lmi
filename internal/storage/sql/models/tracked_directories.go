// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrackedDirectory is an object representing the database table.
type TrackedDirectory struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *trackedDirectoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackedDirectoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackedDirectoryColumns = struct {
	ID        string
	DeletedAt string
}{
	ID:        "id",
	DeletedAt: "deleted_at",
}

var TrackedDirectoryTableColumns = struct {
	ID        string
	DeletedAt string
}{
	ID:        "tracked_directories.id",
	DeletedAt: "tracked_directories.deleted_at",
}

// Generated where

var TrackedDirectoryWhere = struct {
	ID        whereHelperstring
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"tracked_directories\".\"id\""},
	DeletedAt: whereHelpernull_Time{field: "\"tracked_directories\".\"deleted_at\""},
}

// TrackedDirectoryRels is where relationship names are stored.
var TrackedDirectoryRels = struct {
	ScopeEffectivePermissions string
	ScopeRoleAssignments      string
}{
	ScopeEffectivePermissions: "ScopeEffectivePermissions",
	ScopeRoleAssignments:      "ScopeRoleAssignments",
}

// trackedDirectoryR is where relationships are stored.
type trackedDirectoryR struct {
	ScopeEffectivePermissions EffectivePermissionSlice `boil:"ScopeEffectivePermissions" json:"ScopeEffectivePermissions" toml:"ScopeEffectivePermissions" yaml:"ScopeEffectivePermissions"`
	ScopeRoleAssignments      RoleAssignmentSlice      `boil:"ScopeRoleAssignments" json:"ScopeRoleAssignments" toml:"ScopeRoleAssignments" yaml:"ScopeRoleAssignments"`
}

// NewStruct creates a new relationship struct
func (*trackedDirectoryR) NewStruct() *trackedDirectoryR {
	return &trackedDirectoryR{}
}

func (r *trackedDirectoryR) GetScopeEffectivePermissions() EffectivePermissionSlice {
	if r == nil {
		return nil
	}
	return r.ScopeEffectivePermissions
}

func (r *trackedDirectoryR) GetScopeRoleAssignments() RoleAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.ScopeRoleAssignments
}

// trackedDirectoryL is where Load methods for each relationship are stored.
type trackedDirectoryL struct{}

var (
	trackedDirectoryAllColumns            = []string{"id", "deleted_at"}
	trackedDirectoryColumnsWithoutDefault = []string{"id"}
	trackedDirectoryColumnsWithDefault    = []string{"deleted_at"}
	trackedDirectoryPrimaryKeyColumns     = []string{"id"}
	trackedDirectoryGeneratedColumns      = []string{}
)

type (
	// TrackedDirectorySlice is an alias for a slice of pointers to TrackedDirectory.
	// This should almost always be used instead of []TrackedDirectory.
	TrackedDirectorySlice []*TrackedDirectory
	// TrackedDirectoryHook is the signature for custom TrackedDirectory hook methods
	TrackedDirectoryHook func(context.Context, boil.ContextExecutor, *TrackedDirectory) error

	trackedDirectoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackedDirectoryType                 = reflect.TypeOf(&TrackedDirectory{})
	trackedDirectoryMapping              = queries.MakeStructMapping(trackedDirectoryType)
	trackedDirectoryPrimaryKeyMapping, _ = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, trackedDirectoryPrimaryKeyColumns)
	trackedDirectoryInsertCacheMut       sync.RWMutex
	trackedDirectoryInsertCache          = make(map[string]insertCache)
	trackedDirectoryUpdateCacheMut       sync.RWMutex
	trackedDirectoryUpdateCache          = make(map[string]updateCache)
	trackedDirectoryUpsertCacheMut       sync.RWMutex
	trackedDirectoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackedDirectoryAfterSelectHooks []TrackedDirectoryHook

var trackedDirectoryBeforeInsertHooks []TrackedDirectoryHook
var trackedDirectoryAfterInsertHooks []TrackedDirectoryHook

var trackedDirectoryBeforeUpdateHooks []TrackedDirectoryHook
var trackedDirectoryAfterUpdateHooks []TrackedDirectoryHook

var trackedDirectoryBeforeDeleteHooks []TrackedDirectoryHook
var trackedDirectoryAfterDeleteHooks []TrackedDirectoryHook

var trackedDirectoryBeforeUpsertHooks []TrackedDirectoryHook
var trackedDirectoryAfterUpsertHooks []TrackedDirectoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackedDirectory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackedDirectory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackedDirectory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackedDirectory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackedDirectory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackedDirectory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackedDirectory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackedDirectory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackedDirectory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDirectoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackedDirectoryHook registers your hook function for all future operations.
func AddTrackedDirectoryHook(hookPoint boil.HookPoint, trackedDirectoryHook TrackedDirectoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackedDirectoryAfterSelectHooks = append(trackedDirectoryAfterSelectHooks, trackedDirectoryHook)
	case boil.BeforeInsertHook:
		trackedDirectoryBeforeInsertHooks = append(trackedDirectoryBeforeInsertHooks, trackedDirectoryHook)
	case boil.AfterInsertHook:
		trackedDirectoryAfterInsertHooks = append(trackedDirectoryAfterInsertHooks, trackedDirectoryHook)
	case boil.BeforeUpdateHook:
		trackedDirectoryBeforeUpdateHooks = append(trackedDirectoryBeforeUpdateHooks, trackedDirectoryHook)
	case boil.AfterUpdateHook:
		trackedDirectoryAfterUpdateHooks = append(trackedDirectoryAfterUpdateHooks, trackedDirectoryHook)
	case boil.BeforeDeleteHook:
		trackedDirectoryBeforeDeleteHooks = append(trackedDirectoryBeforeDeleteHooks, trackedDirectoryHook)
	case boil.AfterDeleteHook:
		trackedDirectoryAfterDeleteHooks = append(trackedDirectoryAfterDeleteHooks, trackedDirectoryHook)
	case boil.BeforeUpsertHook:
		trackedDirectoryBeforeUpsertHooks = append(trackedDirectoryBeforeUpsertHooks, trackedDirectoryHook)
	case boil.AfterUpsertHook:
		trackedDirectoryAfterUpsertHooks = append(trackedDirectoryAfterUpsertHooks, trackedDirectoryHook)
	}
}

// One returns a single trackedDirectory record from the query.
func (q trackedDirectoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrackedDirectory, error) {
	o := &TrackedDirectory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracked_directories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackedDirectory records from the query.
func (q trackedDirectoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackedDirectorySlice, error) {
	var o []*TrackedDirectory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackedDirectory slice")
	}

	if len(trackedDirectoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackedDirectory records in the query.
func (q trackedDirectoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracked_directories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackedDirectoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracked_directories exists")
	}

	return count > 0, nil
}

// ScopeEffectivePermissions retrieves all the effective_permission's EffectivePermissions with an executor via scope column.
func (o *TrackedDirectory) ScopeEffectivePermissions(mods ...qm.QueryMod) effectivePermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"effective_permissions\".\"scope\"=?", o.ID),
	)

	return EffectivePermissions(queryMods...)
}

// ScopeRoleAssignments retrieves all the role_assignment's RoleAssignments with an executor via scope column.
func (o *TrackedDirectory) ScopeRoleAssignments(mods ...qm.QueryMod) roleAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_assignments\".\"scope\"=?", o.ID),
	)

	return RoleAssignments(queryMods...)
}

// LoadScopeEffectivePermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedDirectoryL) LoadScopeEffectivePermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedDirectory interface{}, mods queries.Applicator) error {
	var slice []*TrackedDirectory
	var object *TrackedDirectory

	if singular {
		var ok bool
		object, ok = maybeTrackedDirectory.(*TrackedDirectory)
		if !ok {
			object = new(TrackedDirectory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackedDirectory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackedDirectory))
			}
		}
	} else {
		s, ok := maybeTrackedDirectory.(*[]*TrackedDirectory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackedDirectory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackedDirectory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedDirectoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedDirectoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`effective_permissions`),
		qm.WhereIn(`effective_permissions.scope in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load effective_permissions")
	}

	var resultSlice []*EffectivePermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice effective_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on effective_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for effective_permissions")
	}

	if len(effectivePermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScopeEffectivePermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &effectivePermissionR{}
			}
			foreign.R.ScopeTrackedDirectory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Scope {
				local.R.ScopeEffectivePermissions = append(local.R.ScopeEffectivePermissions, foreign)
				if foreign.R == nil {
					foreign.R = &effectivePermissionR{}
				}
				foreign.R.ScopeTrackedDirectory = local
				break
			}
		}
	}

	return nil
}

// LoadScopeRoleAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedDirectoryL) LoadScopeRoleAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedDirectory interface{}, mods queries.Applicator) error {
	var slice []*TrackedDirectory
	var object *TrackedDirectory

	if singular {
		var ok bool
		object, ok = maybeTrackedDirectory.(*TrackedDirectory)
		if !ok {
			object = new(TrackedDirectory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackedDirectory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackedDirectory))
			}
		}
	} else {
		s, ok := maybeTrackedDirectory.(*[]*TrackedDirectory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackedDirectory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackedDirectory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedDirectoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedDirectoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_assignments`),
		qm.WhereIn(`role_assignments.scope in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_assignments")
	}

	var resultSlice []*RoleAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_assignments")
	}

	if len(roleAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScopeRoleAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleAssignmentR{}
			}
			foreign.R.ScopeTrackedDirectory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Scope {
				local.R.ScopeRoleAssignments = append(local.R.ScopeRoleAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &roleAssignmentR{}
				}
				foreign.R.ScopeTrackedDirectory = local
				break
			}
		}
	}

	return nil
}

// AddScopeEffectivePermissions adds the given related objects to the existing relationships
// of the tracked_directory, optionally inserting them as new records.
// Appends related to o.R.ScopeEffectivePermissions.
// Sets related.R.ScopeTrackedDirectory appropriately.
func (o *TrackedDirectory) AddScopeEffectivePermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EffectivePermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Scope = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"effective_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scope"}),
				strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SubjectID, rel.Target, rel.Scope}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Scope = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackedDirectoryR{
			ScopeEffectivePermissions: related,
		}
	} else {
		o.R.ScopeEffectivePermissions = append(o.R.ScopeEffectivePermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &effectivePermissionR{
				ScopeTrackedDirectory: o,
			}
		} else {
			rel.R.ScopeTrackedDirectory = o
		}
	}
	return nil
}

// AddScopeRoleAssignments adds the given related objects to the existing relationships
// of the tracked_directory, optionally inserting them as new records.
// Appends related to o.R.ScopeRoleAssignments.
// Sets related.R.ScopeTrackedDirectory appropriately.
func (o *TrackedDirectory) AddScopeRoleAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Scope = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scope"}),
				strmangle.WhereClause("\"", "\"", 2, roleAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Scope = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackedDirectoryR{
			ScopeRoleAssignments: related,
		}
	} else {
		o.R.ScopeRoleAssignments = append(o.R.ScopeRoleAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleAssignmentR{
				ScopeTrackedDirectory: o,
			}
		} else {
			rel.R.ScopeTrackedDirectory = o
		}
	}
	return nil
}

// TrackedDirectories retrieves all the records using an executor.
func TrackedDirectories(mods ...qm.QueryMod) trackedDirectoryQuery {
	mods = append(mods, qm.From("\"tracked_directories\""), qmhelper.WhereIsNull("\"tracked_directories\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tracked_directories\".*"})
	}

	return trackedDirectoryQuery{q}
}

// FindTrackedDirectory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackedDirectory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TrackedDirectory, error) {
	trackedDirectoryObj := &TrackedDirectory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracked_directories\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackedDirectoryObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from tracked_directories")
	}

	if err = trackedDirectoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackedDirectoryObj, err
	}

	return trackedDirectoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackedDirectory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_directories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedDirectoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackedDirectoryInsertCacheMut.RLock()
	cache, cached := trackedDirectoryInsertCache[key]
	trackedDirectoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackedDirectoryAllColumns,
			trackedDirectoryColumnsWithDefault,
			trackedDirectoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracked_directories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracked_directories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracked_directories")
	}

	if !cached {
		trackedDirectoryInsertCacheMut.Lock()
		trackedDirectoryInsertCache[key] = cache
		trackedDirectoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrackedDirectory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackedDirectory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackedDirectoryUpdateCacheMut.RLock()
	cache, cached := trackedDirectoryUpdateCache[key]
	trackedDirectoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackedDirectoryAllColumns,
			trackedDirectoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracked_directories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracked_directories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackedDirectoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, append(wl, trackedDirectoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracked_directories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracked_directories")
	}

	if !cached {
		trackedDirectoryUpdateCacheMut.Lock()
		trackedDirectoryUpdateCache[key] = cache
		trackedDirectoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackedDirectoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracked_directories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracked_directories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackedDirectorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDirectoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracked_directories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackedDirectoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trackedDirectory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trackedDirectory")
	}
	return rowsAff, nil
}

// Delete deletes a single TrackedDirectory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackedDirectory) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TrackedDirectory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackedDirectoryPrimaryKeyMapping)
		sql = "DELETE FROM \"tracked_directories\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"tracked_directories\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, append(wl, trackedDirectoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracked_directories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracked_directories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackedDirectoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackedDirectoryQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracked_directories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_directories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackedDirectorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackedDirectoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDirectoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"tracked_directories\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedDirectoryPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDirectoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"tracked_directories\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, trackedDirectoryPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackedDirectory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_directories")
	}

	if len(trackedDirectoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackedDirectory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrackedDirectory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackedDirectorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackedDirectorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDirectoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracked_directories\".* FROM \"tracked_directories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedDirectoryPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackedDirectorySlice")
	}

	*o = slice

	return nil
}

// TrackedDirectoryExists checks if the TrackedDirectory row exists.
func TrackedDirectoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracked_directories\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracked_directories exists")
	}

	return exists, nil
}

// Exists checks if the TrackedDirectory row exists.
func (o *TrackedDirectory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrackedDirectoryExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackedDirectory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_directories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedDirectoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackedDirectoryUpsertCacheMut.RLock()
	cache, cached := trackedDirectoryUpsertCache[key]
	trackedDirectoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackedDirectoryAllColumns,
			trackedDirectoryColumnsWithDefault,
			trackedDirectoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackedDirectoryAllColumns,
			trackedDirectoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracked_directories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackedDirectoryPrimaryKeyColumns))
			copy(conflict, trackedDirectoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"tracked_directories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackedDirectoryType, trackedDirectoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracked_directories")
	}

	if !cached {
		trackedDirectoryUpsertCacheMut.Lock()
		trackedDirectoryUpsertCache[key] = cache
		trackedDirectoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
