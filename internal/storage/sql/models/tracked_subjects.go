// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrackedSubject is an object representing the database table.
type TrackedSubject struct {
	SubjectID string `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`

	R *trackedSubjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackedSubjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackedSubjectColumns = struct {
	SubjectID string
}{
	SubjectID: "subject_id",
}

var TrackedSubjectTableColumns = struct {
	SubjectID string
}{
	SubjectID: "tracked_subjects.subject_id",
}

// Generated where

var TrackedSubjectWhere = struct {
	SubjectID whereHelperstring
}{
	SubjectID: whereHelperstring{field: "\"tracked_subjects\".\"subject_id\""},
}

// TrackedSubjectRels is where relationship names are stored.
var TrackedSubjectRels = struct {
	SubjectEffectivePermissions string
	SubjectRoleAssignments      string
}{
	SubjectEffectivePermissions: "SubjectEffectivePermissions",
	SubjectRoleAssignments:      "SubjectRoleAssignments",
}

// trackedSubjectR is where relationships are stored.
type trackedSubjectR struct {
	SubjectEffectivePermissions EffectivePermissionSlice `boil:"SubjectEffectivePermissions" json:"SubjectEffectivePermissions" toml:"SubjectEffectivePermissions" yaml:"SubjectEffectivePermissions"`
	SubjectRoleAssignments      RoleAssignmentSlice      `boil:"SubjectRoleAssignments" json:"SubjectRoleAssignments" toml:"SubjectRoleAssignments" yaml:"SubjectRoleAssignments"`
}

// NewStruct creates a new relationship struct
func (*trackedSubjectR) NewStruct() *trackedSubjectR {
	return &trackedSubjectR{}
}

func (r *trackedSubjectR) GetSubjectEffectivePermissions() EffectivePermissionSlice {
	if r == nil {
		return nil
	}
	return r.SubjectEffectivePermissions
}

func (r *trackedSubjectR) GetSubjectRoleAssignments() RoleAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.SubjectRoleAssignments
}

// trackedSubjectL is where Load methods for each relationship are stored.
type trackedSubjectL struct{}

var (
	trackedSubjectAllColumns            = []string{"subject_id"}
	trackedSubjectColumnsWithoutDefault = []string{"subject_id"}
	trackedSubjectColumnsWithDefault    = []string{}
	trackedSubjectPrimaryKeyColumns     = []string{"subject_id"}
	trackedSubjectGeneratedColumns      = []string{}
)

type (
	// TrackedSubjectSlice is an alias for a slice of pointers to TrackedSubject.
	// This should almost always be used instead of []TrackedSubject.
	TrackedSubjectSlice []*TrackedSubject
	// TrackedSubjectHook is the signature for custom TrackedSubject hook methods
	TrackedSubjectHook func(context.Context, boil.ContextExecutor, *TrackedSubject) error

	trackedSubjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackedSubjectType                 = reflect.TypeOf(&TrackedSubject{})
	trackedSubjectMapping              = queries.MakeStructMapping(trackedSubjectType)
	trackedSubjectPrimaryKeyMapping, _ = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, trackedSubjectPrimaryKeyColumns)
	trackedSubjectInsertCacheMut       sync.RWMutex
	trackedSubjectInsertCache          = make(map[string]insertCache)
	trackedSubjectUpdateCacheMut       sync.RWMutex
	trackedSubjectUpdateCache          = make(map[string]updateCache)
	trackedSubjectUpsertCacheMut       sync.RWMutex
	trackedSubjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackedSubjectAfterSelectHooks []TrackedSubjectHook

var trackedSubjectBeforeInsertHooks []TrackedSubjectHook
var trackedSubjectAfterInsertHooks []TrackedSubjectHook

var trackedSubjectBeforeUpdateHooks []TrackedSubjectHook
var trackedSubjectAfterUpdateHooks []TrackedSubjectHook

var trackedSubjectBeforeDeleteHooks []TrackedSubjectHook
var trackedSubjectAfterDeleteHooks []TrackedSubjectHook

var trackedSubjectBeforeUpsertHooks []TrackedSubjectHook
var trackedSubjectAfterUpsertHooks []TrackedSubjectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackedSubject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackedSubject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackedSubject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackedSubject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackedSubject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackedSubject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackedSubject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackedSubject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackedSubject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedSubjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackedSubjectHook registers your hook function for all future operations.
func AddTrackedSubjectHook(hookPoint boil.HookPoint, trackedSubjectHook TrackedSubjectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackedSubjectAfterSelectHooks = append(trackedSubjectAfterSelectHooks, trackedSubjectHook)
	case boil.BeforeInsertHook:
		trackedSubjectBeforeInsertHooks = append(trackedSubjectBeforeInsertHooks, trackedSubjectHook)
	case boil.AfterInsertHook:
		trackedSubjectAfterInsertHooks = append(trackedSubjectAfterInsertHooks, trackedSubjectHook)
	case boil.BeforeUpdateHook:
		trackedSubjectBeforeUpdateHooks = append(trackedSubjectBeforeUpdateHooks, trackedSubjectHook)
	case boil.AfterUpdateHook:
		trackedSubjectAfterUpdateHooks = append(trackedSubjectAfterUpdateHooks, trackedSubjectHook)
	case boil.BeforeDeleteHook:
		trackedSubjectBeforeDeleteHooks = append(trackedSubjectBeforeDeleteHooks, trackedSubjectHook)
	case boil.AfterDeleteHook:
		trackedSubjectAfterDeleteHooks = append(trackedSubjectAfterDeleteHooks, trackedSubjectHook)
	case boil.BeforeUpsertHook:
		trackedSubjectBeforeUpsertHooks = append(trackedSubjectBeforeUpsertHooks, trackedSubjectHook)
	case boil.AfterUpsertHook:
		trackedSubjectAfterUpsertHooks = append(trackedSubjectAfterUpsertHooks, trackedSubjectHook)
	}
}

// One returns a single trackedSubject record from the query.
func (q trackedSubjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrackedSubject, error) {
	o := &TrackedSubject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracked_subjects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackedSubject records from the query.
func (q trackedSubjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackedSubjectSlice, error) {
	var o []*TrackedSubject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackedSubject slice")
	}

	if len(trackedSubjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackedSubject records in the query.
func (q trackedSubjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracked_subjects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackedSubjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracked_subjects exists")
	}

	return count > 0, nil
}

// SubjectEffectivePermissions retrieves all the effective_permission's EffectivePermissions with an executor via subject_id column.
func (o *TrackedSubject) SubjectEffectivePermissions(mods ...qm.QueryMod) effectivePermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"effective_permissions\".\"subject_id\"=?", o.SubjectID),
	)

	return EffectivePermissions(queryMods...)
}

// SubjectRoleAssignments retrieves all the role_assignment's RoleAssignments with an executor via subject_id column.
func (o *TrackedSubject) SubjectRoleAssignments(mods ...qm.QueryMod) roleAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_assignments\".\"subject_id\"=?", o.SubjectID),
	)

	return RoleAssignments(queryMods...)
}

// LoadSubjectEffectivePermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedSubjectL) LoadSubjectEffectivePermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedSubject interface{}, mods queries.Applicator) error {
	var slice []*TrackedSubject
	var object *TrackedSubject

	if singular {
		var ok bool
		object, ok = maybeTrackedSubject.(*TrackedSubject)
		if !ok {
			object = new(TrackedSubject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackedSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackedSubject))
			}
		}
	} else {
		s, ok := maybeTrackedSubject.(*[]*TrackedSubject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackedSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackedSubject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedSubjectR{}
		}
		args = append(args, object.SubjectID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedSubjectR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`effective_permissions`),
		qm.WhereIn(`effective_permissions.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load effective_permissions")
	}

	var resultSlice []*EffectivePermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice effective_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on effective_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for effective_permissions")
	}

	if len(effectivePermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubjectEffectivePermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &effectivePermissionR{}
			}
			foreign.R.Subject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SubjectID == foreign.SubjectID {
				local.R.SubjectEffectivePermissions = append(local.R.SubjectEffectivePermissions, foreign)
				if foreign.R == nil {
					foreign.R = &effectivePermissionR{}
				}
				foreign.R.Subject = local
				break
			}
		}
	}

	return nil
}

// LoadSubjectRoleAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedSubjectL) LoadSubjectRoleAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedSubject interface{}, mods queries.Applicator) error {
	var slice []*TrackedSubject
	var object *TrackedSubject

	if singular {
		var ok bool
		object, ok = maybeTrackedSubject.(*TrackedSubject)
		if !ok {
			object = new(TrackedSubject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackedSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackedSubject))
			}
		}
	} else {
		s, ok := maybeTrackedSubject.(*[]*TrackedSubject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackedSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackedSubject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedSubjectR{}
		}
		args = append(args, object.SubjectID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedSubjectR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_assignments`),
		qm.WhereIn(`role_assignments.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_assignments")
	}

	var resultSlice []*RoleAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_assignments")
	}

	if len(roleAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubjectRoleAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleAssignmentR{}
			}
			foreign.R.Subject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SubjectID == foreign.SubjectID {
				local.R.SubjectRoleAssignments = append(local.R.SubjectRoleAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &roleAssignmentR{}
				}
				foreign.R.Subject = local
				break
			}
		}
	}

	return nil
}

// AddSubjectEffectivePermissions adds the given related objects to the existing relationships
// of the tracked_subject, optionally inserting them as new records.
// Appends related to o.R.SubjectEffectivePermissions.
// Sets related.R.Subject appropriately.
func (o *TrackedSubject) AddSubjectEffectivePermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EffectivePermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubjectID = o.SubjectID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"effective_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
				strmangle.WhereClause("\"", "\"", 2, effectivePermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.SubjectID, rel.SubjectID, rel.Target, rel.Scope}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubjectID = o.SubjectID
		}
	}

	if o.R == nil {
		o.R = &trackedSubjectR{
			SubjectEffectivePermissions: related,
		}
	} else {
		o.R.SubjectEffectivePermissions = append(o.R.SubjectEffectivePermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &effectivePermissionR{
				Subject: o,
			}
		} else {
			rel.R.Subject = o
		}
	}
	return nil
}

// AddSubjectRoleAssignments adds the given related objects to the existing relationships
// of the tracked_subject, optionally inserting them as new records.
// Appends related to o.R.SubjectRoleAssignments.
// Sets related.R.Subject appropriately.
func (o *TrackedSubject) AddSubjectRoleAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubjectID = o.SubjectID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.SubjectID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubjectID = o.SubjectID
		}
	}

	if o.R == nil {
		o.R = &trackedSubjectR{
			SubjectRoleAssignments: related,
		}
	} else {
		o.R.SubjectRoleAssignments = append(o.R.SubjectRoleAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleAssignmentR{
				Subject: o,
			}
		} else {
			rel.R.Subject = o
		}
	}
	return nil
}

// TrackedSubjects retrieves all the records using an executor.
func TrackedSubjects(mods ...qm.QueryMod) trackedSubjectQuery {
	mods = append(mods, qm.From("\"tracked_subjects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tracked_subjects\".*"})
	}

	return trackedSubjectQuery{q}
}

// FindTrackedSubject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackedSubject(ctx context.Context, exec boil.ContextExecutor, subjectID string, selectCols ...string) (*TrackedSubject, error) {
	trackedSubjectObj := &TrackedSubject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracked_subjects\" where \"subject_id\"=$1", sel,
	)

	q := queries.Raw(query, subjectID)

	err := q.Bind(ctx, exec, trackedSubjectObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from tracked_subjects")
	}

	if err = trackedSubjectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackedSubjectObj, err
	}

	return trackedSubjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackedSubject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_subjects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedSubjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackedSubjectInsertCacheMut.RLock()
	cache, cached := trackedSubjectInsertCache[key]
	trackedSubjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackedSubjectAllColumns,
			trackedSubjectColumnsWithDefault,
			trackedSubjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracked_subjects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracked_subjects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracked_subjects")
	}

	if !cached {
		trackedSubjectInsertCacheMut.Lock()
		trackedSubjectInsertCache[key] = cache
		trackedSubjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrackedSubject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackedSubject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackedSubjectUpdateCacheMut.RLock()
	cache, cached := trackedSubjectUpdateCache[key]
	trackedSubjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackedSubjectAllColumns,
			trackedSubjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracked_subjects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracked_subjects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackedSubjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, append(wl, trackedSubjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracked_subjects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracked_subjects")
	}

	if !cached {
		trackedSubjectUpdateCacheMut.Lock()
		trackedSubjectUpdateCache[key] = cache
		trackedSubjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackedSubjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracked_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracked_subjects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackedSubjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracked_subjects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackedSubjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trackedSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trackedSubject")
	}
	return rowsAff, nil
}

// Delete deletes a single TrackedSubject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackedSubject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TrackedSubject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackedSubjectPrimaryKeyMapping)
	sql := "DELETE FROM \"tracked_subjects\" WHERE \"subject_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracked_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracked_subjects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackedSubjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackedSubjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracked_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_subjects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackedSubjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackedSubjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tracked_subjects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedSubjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackedSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_subjects")
	}

	if len(trackedSubjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackedSubject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrackedSubject(ctx, exec, o.SubjectID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackedSubjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackedSubjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracked_subjects\".* FROM \"tracked_subjects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedSubjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackedSubjectSlice")
	}

	*o = slice

	return nil
}

// TrackedSubjectExists checks if the TrackedSubject row exists.
func TrackedSubjectExists(ctx context.Context, exec boil.ContextExecutor, subjectID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracked_subjects\" where \"subject_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, subjectID)
	}
	row := exec.QueryRowContext(ctx, sql, subjectID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracked_subjects exists")
	}

	return exists, nil
}

// Exists checks if the TrackedSubject row exists.
func (o *TrackedSubject) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrackedSubjectExists(ctx, exec, o.SubjectID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackedSubject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_subjects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedSubjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackedSubjectUpsertCacheMut.RLock()
	cache, cached := trackedSubjectUpsertCache[key]
	trackedSubjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackedSubjectAllColumns,
			trackedSubjectColumnsWithDefault,
			trackedSubjectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackedSubjectAllColumns,
			trackedSubjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracked_subjects, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackedSubjectPrimaryKeyColumns))
			copy(conflict, trackedSubjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"tracked_subjects\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackedSubjectType, trackedSubjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracked_subjects")
	}

	if !cached {
		trackedSubjectUpsertCacheMut.Lock()
		trackedSubjectUpsertCache[key] = cache
		trackedSubjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
