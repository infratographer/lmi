// This code was originally generated by github.com/deepmap/oapi-codegen version v1.12.4
// However, it has been modified for it to work in a separate package with our
// additional middleware.
package httpsrv

import (
	"fmt"
	"net/http"

	oapimdw "github.com/deepmap/oapi-codegen/pkg/gin-middleware"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"

	apiv1 "github.com/infratographer/lmi/api/v1"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /assignments)
	GetAssignments(c *gin.Context, params apiv1.GetAssignmentsParams)

	// (GET /permissions)
	GetPermissions(c *gin.Context)

	// (GET /roles)
	GetRoles(c *gin.Context)

	// (POST /roles)
	CreateRole(c *gin.Context)

	// (DELETE /roles/{id})
	DeleteRole(c *gin.Context, id string)

	// (GET /roles/{id})
	GetRole(c *gin.Context, id string)

	// (PUT /roles/{id})
	UpdateRole(c *gin.Context, id string)

	// (DELETE /roles/{id}/assignments)
	RemoveRoleAssignment(c *gin.Context, id string)

	// (GET /roles/{id}/assignments)
	GetRoleAssignments(c *gin.Context, id string)

	// (POST /roles/{id}/assignments)
	AssignRole(c *gin.Context, id string)

	// (DELETE /roles/{id}/permissions)
	RemoveRolePermission(c *gin.Context, id string)

	// (GET /roles/{id}/permissions)
	GetRolePermissions(c *gin.Context, id string)

	// (POST /roles/{id}/permissions)
	AddRolePermission(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler      ServerInterface
	ErrorHandler func(*gin.Context, error, int)
	options      GinServerOptions
}

// GetAssignments operation middleware.
func (siw *ServerInterfaceWrapper) GetAssignments(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params apiv1.GetAssignmentsParams

	// ------------- Required query parameter "subject" -------------

	if paramValue := c.Query("subject"); paramValue != "" {
	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument subject is required, but not found: %w", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "subject", c.Request.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter subject: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scope" -------------

	if paramValue := c.Query("scope"); paramValue != "" {
	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument scope is required, but not found: %w", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scope", c.Request.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter scope: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetAssignments(c, params)
}

// GetPermissions operation middleware.
func (siw *ServerInterfaceWrapper) GetPermissions(c *gin.Context) {
	siw.Handler.GetPermissions(c)
}

// GetRoles operation middleware.
func (siw *ServerInterfaceWrapper) GetRoles(c *gin.Context) {
	siw.Handler.GetRoles(c)
}

// CreateRole operation middleware.
func (siw *ServerInterfaceWrapper) CreateRole(c *gin.Context) {
	siw.Handler.CreateRole(c)
}

// DeleteRole operation middleware.
func (siw *ServerInterfaceWrapper) DeleteRole(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.DeleteRole(c, id)
}

// GetRole operation middleware.
func (siw *ServerInterfaceWrapper) GetRole(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRole(c, id)
}

// UpdateRole operation middleware.
func (siw *ServerInterfaceWrapper) UpdateRole(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.UpdateRole(c, id)
}

// RemoveRoleAssignment operation middleware.
func (siw *ServerInterfaceWrapper) RemoveRoleAssignment(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.RemoveRoleAssignment(c, id)
}

// GetRoleAssignments operation middleware.
func (siw *ServerInterfaceWrapper) GetRoleAssignments(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRoleAssignments(c, id)
}

// AssignRole operation middleware.
func (siw *ServerInterfaceWrapper) AssignRole(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.AssignRole(c, id)
}

// RemoveRolePermission operation middleware.
func (siw *ServerInterfaceWrapper) RemoveRolePermission(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.RemoveRolePermission(c, id)
}

// GetRolePermissions operation middleware.
func (siw *ServerInterfaceWrapper) GetRolePermissions(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRolePermissions(c, id)
}

// AddRolePermission operation middleware.
func (siw *ServerInterfaceWrapper) AddRolePermission(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	siw.Handler.AddRolePermission(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	ErrorHandler func(*gin.Context, error, int)
}

// NewRouter creates http.Handler with routing matching OpenAPI spec.
func NewRouter(si ServerInterface) *ServerInterfaceWrapper {
	return NewRouterWithOptions(si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options.
func NewRouterWithOptions(si ServerInterface, options GinServerOptions) *ServerInterfaceWrapper {
	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := &ServerInterfaceWrapper{
		Handler:      si,
		ErrorHandler: errorHandler,
		options:      options,
	}

	return wrapper
}

func (siw *ServerInterfaceWrapper) Routes(rg *gin.RouterGroup) {
	rg = rg.Group("/v1")

	swagger, err := apiv1.GetSwagger()

	// If this fails it's a bug in the code generation.
	if err != nil {
		panic(err)
	}

	rg.Use(oapimdw.OapiRequestValidator(swagger))

	rg.GET("/assignments", siw.GetAssignments)

	rg.GET("/permissions", siw.GetPermissions)

	rg.GET("/roles", siw.GetRoles)

	rg.POST("/roles", siw.CreateRole)

	rg.DELETE("/roles/:id", siw.DeleteRole)

	rg.GET("/roles/:id", siw.GetRole)

	rg.PUT("/roles/:id", siw.UpdateRole)

	rg.DELETE("/roles/:id/assignments", siw.RemoveRoleAssignment)

	rg.GET("/roles/:id/assignments", siw.GetRoleAssignments)

	rg.POST("/roles/:id/assignments", siw.AssignRole)

	rg.DELETE("/roles/:id/permissions", siw.RemoveRolePermission)

	rg.GET("/roles/:id/permissions", siw.GetRolePermissions)

	rg.POST("/roles/:id/permissions", siw.AddRolePermission)
}
